# configure alpine

read -p "Would you like to install k3s? (y/N)? " k3s

IS_MASTER=$(hostname | grep -i "k8s-master")

MASTER_IP=""
MASTER_TOKEN=""
if [ "$k3s" != "${k3s#[Yy]}" ] ;then
    if [ -z "$IS_MASTER" ]; then
        read -p "Enter the IP address of the master node: " MASTER_IP

        read -s -p "Enter the token of the master node: " MASTER_TOKEN
    fi
fi

# set the timezone to amsterdam
ln -sf /usr/share/zoneinfo/Europe/Amsterdam /etc/localtime
echo "Europe/Amsterdam" > /etc/timezone

# update and upgrade
apk update
apk upgrade

# install openssh and configure it, should be able to login as root with password
sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config
sed -i 's/#PasswordAuthentication yes/PasswordAuthentication yes/' /etc/ssh/sshd_config
sed -i 's/#PermitEmptyPasswords no/PermitEmptyPasswords yes/' /etc/ssh/sshd_config
rc-service sshd restart
rc-update add sshd

# install bash
apk add bash

# install sudo
apk add sudo
echo "root ALL=(ALL) ALL" > /etc/sudoers

# install ping, netcat, curl, wget, vim, git, bash
apk add iputils netcat-openbsd curl wget vim git bash

if [ -z "$k3s" ]; then
    k3s="n"
fi
if [ "$k3s" != "${k3s#[Yy]}" ] ;then
    # install k3s
    if [ ! -z "$IS_MASTER" ]; then
        curl -sfL https://get.k3s.io | sh -
    else
        curl -sfL https://get.k3s.io | K3S_URL=https://$MASTER_IP:6443 K3S_TOKEN=$MASTER_TOKEN sh -
    fi
else
    echo "https://dl-cdn.alpinelinux.org/alpine/edge/community" >> /etc/apk/repositories
    echo "https://dl-cdn.alpinelinux.org/alpine/edge/testing" >> /etc/apk/repositories
    apk update

    apk add cri-o kubeadm kubectl kubelet containerd

    # Disable swap immediately
    swapoff -a

    # Backup /etc/fstab
    cp /etc/fstab /etc/fstab.bak

    # Comment out any swap entries in /etc/fstab to disable swap permanently
    sed -i '/swap/s/^/#/' /etc/fstab

    # Verify swap is disabled
    if free | grep -i swap | grep '0'; then
        echo "Swap is disabled."
    else
        echo "Failed to disable swap."
        exit 1
    fi

    rc-update add kubelet default
    service kubelet start

    echo 1 > /proc/sys/net/ipv4/ip_forward

    sed -i '/net.ipv4.ip_forward/s/^#//g' /etc/sysctl.conf; grep -q "net.ipv4.ip_forward" /etc/sysctl.conf || echo "net.ipv4.ip_forward = 1" >> /etc/sysctl.conf

    # check if hostname starts with k8s-master
    IS_MASTER=$(hostname | grep -i "k8s-master")
    if [ ! -z "$IS_MASTER" ]; then
        kubeadm init --ignore-preflight-errors=NumCPU,Mem
    else
        echo "cgroup  /sys/fs/cgroup  tmpfs  uid=0,gid=0,mode=0755  0  0" | sudo tee -a /etc/fstab

        rc-update add cgroups default

        rc-service cgroups start
        rc-service containerd start

        kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml

        # kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml

        kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/cloud/deploy.yaml

        # Mount /sys as a shared cgroup
        echo '#!/bin/sh' | tee /etc/local.d/sys-shared-mount.start
        echo 'mount --make-rshared /sys' | tee -a /etc/local.d/sys-shared-mount.start
        chmod +x /etc/local.d/sys-shared-mount.start

        echo '#!/bin/sh' | tee /etc/local.d/root-shared-mount.start
        echo 'mount --make-rshared /' | tee -a /etc/local.d/root-shared-mount.start
        chmod +x /etc/local.d/root-shared-mount.start

        rc-update add local default

        # To verify
        # findmnt -o target,propagation /sys
        # findmnt -o target,propagation /

        rc-service kubelet restart
        rc-service containerd restart
        rc-update add kubelet default
        rc-update add containerd default
    fi
fi